// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, Image, Seq, Sprite, checksum, fs, im, watch,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require("fs");

  im = require("imagemagick");

  watch = require('watch');

  Seq = require("seq");

  checksum = require('./checksum');

  EventEmitter = require("events").EventEmitter;

  Image = require('./image');

  Sprite = (function(_super) {
    var images;

    __extends(Sprite, _super);

    images = [];

    function Sprite(name, path, mapper, watch) {
      this.name = name;
      this.path = path;
      this.mapper = mapper;
      this.watch = watch != null ? watch : false;
    }

    Sprite.prototype.reload = function() {
      var _this = this;
      return this._readImages(function(err, images) {
        if (!err) {
          _this.images = images;
          _this.mapper.map(_this.images);
          return _this.write(function() {
            return _this.emit("update");
          });
        }
      });
    };

    Sprite.prototype.load = function(cb) {
      var _this = this;
      if (cb == null) {
        cb = function() {};
      }
      if (true === this._fromJson()) {
        return cb(null);
      }
      return this._readImages(function(err, images) {
        if (!err) {
          _this.images = images;
          _this.mapper.map(_this.images);
          _this._watch();
        }
        return cb(err);
      });
    };

    Sprite.prototype.url = function() {
      return "" + this.path + "/" + (this.filename());
    };

    Sprite.prototype.jsonUrl = function() {
      return "" + this.path + "/" + this.name + ".json";
    };

    Sprite.prototype.filename = function() {
      return "" + this.name + ".png";
    };

    Sprite.prototype.write = function(cb) {
      var _this = this;
      return fs.exists(this.url(), function(exists) {
        if (exists) {
          return cb();
        } else {
          return _this._write(cb);
        }
      });
    };

    Sprite.prototype._write = function(cb) {
      var commands, image, _i, _len, _ref,
        _this = this;
      commands = this._emptySprite();
      _ref = this.images;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        this._addImageData(commands, image);
      }
      commands.push(this.url());
      return im.convert(commands, function(err) {
        _this._toJson();
        _this._cleanup();
        return cb(err);
      });
    };

    Sprite.prototype.image = function(name) {
      var result;
      result = this.images.filter(function(i) {
        return i.name === name;
      });
      return result[0];
    };

    Sprite.prototype.checksum = function() {
      var img, sums;
      sums = (function() {
        var _i, _len, _ref, _results;
        _ref = this.images;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          img = _ref[_i];
          _results.push(img.checksum);
        }
        return _results;
      }).call(this);
      return checksum.array(sums);
    };

    Sprite.prototype.shortsum = function() {
      return this.checksum().slice(0, 5);
    };

    Sprite.prototype._watch = function() {
      var _this = this;
      if (!this.watch) {
        return;
      }
      return watch.createMonitor("" + this.path + "/" + this.name + "/", {
        interval: 500
      }, function(m) {
        m.on("created", function() {
          return _this.reload();
        });
        m.on("changed", function() {
          return _this.reload();
        });
        return m.on("removed", function() {
          return _this.reload();
        });
      });
    };

    Sprite.prototype._width = function() {
      return this.mapper.width;
    };

    Sprite.prototype._height = function() {
      return this.mapper.height;
    };

    Sprite.prototype._emptySprite = function() {
      return ["-size", "" + (this._width()) + "x" + (this._height()), "xc:none"];
    };

    Sprite.prototype._addImageData = function(commands, image) {
      return commands.push(image.file(), "-geometry", "+" + image.positionX + "+" + image.positionY, "-composite");
    };

    Sprite.prototype._readImages = function(cb) {
      var limit, self,
        _this = this;
      self = this;
      limit = 10;
      return Seq().seq_(function() {
        return self._getFiles(this);
      }).flatten().parMap(limit, function(filename) {
        return self._getImage(filename, this);
      }).unflatten().seq(function(images) {
        var error, image, _i, _len;
        error = null;
        for (_i = 0, _len = images.length; _i < _len; _i++) {
          image = images[_i];
          if (image == null) {
            error = new Error("unable to read all images");
          }
        }
        return cb(error, images);
      });
    };

    Sprite.prototype._getFiles = function(cb) {
      return fs.readdir("" + this.path + "/" + this.name, function(err, files) {
        files = files.filter(function(file) {
          return file.match(/\.(png|gif|jpg|jpeg)$/);
        });
        return cb(err, files);
      });
    };

    Sprite.prototype._cleanup = function(cb) {
      var self;
      if (cb == null) {
        cb = function() {};
      }
      self = this;
      return fs.readdir("" + this.path, function(err, files) {
        var file, _i, _len;
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (file.match("^" + self.name + "-.*\.png$") && file !== self.filename()) {
            fs.unlinkSync("" + self.path + "/" + file);
          }
        }
        return cb();
      });
    };

    Sprite.prototype._getImage = function(filename, cb) {
      var image;
      image = new Image(filename, "" + this.path + "/" + this.name);
      return image.readDimensions(function(err) {
        if (err) {
          return cb();
        } else {
          return cb(null, image);
        }
      });
    };

    Sprite.prototype._toJson = function() {
      var image, imageInfo, info, _i, _len, _ref;
      info = {
        name: this.name,
        checksum: this.checksum(),
        shortsum: this.shortsum(),
        images: []
      };
      _ref = this.images;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        imageInfo = {
          name: image.name,
          filename: image.filename,
          checksum: image.checksum,
          width: image.width,
          height: image.height,
          positionX: image.positionX,
          positionY: image.positionY
        };
        info.images.push(imageInfo);
      }
      info = JSON.stringify(info, null, '  ');
      return fs.writeFileSync(this.jsonUrl(), info);
    };

    Sprite.prototype._fromJson = function() {
      var error, image, img, info, _i, _len, _ref;
      this.images = [];
      try {
        info = fs.readFileSync(this.jsonUrl(), "UTF-8");
      } catch (_error) {
        error = _error;
        console.log(this.jsonUrl() + " not found");
        return false;
      }
      info = JSON.parse(info);
      _ref = info.images;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        img = _ref[_i];
        image = new Image(img.filename, "" + this.path + "/" + this.name);
        image.width = img.width;
        image.height = img.height;
        image.checksum = img.checksum;
        image.positionX = img.positionX;
        image.positionY = img.positionY;
        this.images.push(image);
      }
      this.mapper.map(this.images);
      return true;
    };

    return Sprite;

  })(EventEmitter);

  module.exports = Sprite;

}).call(this);
